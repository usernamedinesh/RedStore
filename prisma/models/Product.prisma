model Brand {
    id         String          @id @default(uuid())
    name       String
    products   Product[]
    categories CategoryBrand[] //join table
}

model Category {
    id        String          @id @default(uuid()) @map("category_id")
    name      String
    brands    CategoryBrand[]
    products  Product[]
    createdAt DateTime        @default(now()) @map("created_at")

    @@map("categories")
}

model CategoryBrand {
    brand      Brand    @relation(fields: [brandId], references: [id])
    brandId    String
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String

    @@id([brandId, categoryId]) // Composite primary key for the join table 
}

model Product {
    id            String           @id @default(uuid()) @map("product_id")
    name          String
    description   String
    category      Category         @relation(fields: [categoryId], references: [id])
    categoryId    String           @map("category_id")
    brand         Brand            @relation(fields: [brandId], references: [id])
    brandId       String           @map("brand_id")
    gender        Gender           @default(UNISEX)
    thumnailImage String
    basePrice     Float?           @map("base_price")
    variants      ProductVariant[]
    ratings       Rating[]
    createdAt     DateTime         @default(now()) @map("created_at")
    cart          Cart[]

    @@index([name]) // For product name searches
    @@index([brandId]) // For brand filtering
    @@index([categoryId]) // For category-based queries
    @@map("products")
}

// i dont know it gonna work or not 
model Cart {
    id        String         @id @default(uuid()) @map("cart_id")
    user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int            @map("user_id")
    product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String         @map("product_id")
    variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
    variantId String         @map("variant_id")
    quantity  Int
    createdAt DateTime       @default(now()) @map("created_at")

    @@index([userId])
    @@index([productId])
    @@index([variantId])
    @@map("carts")
}

model ProductVariant {
    id        String         @id @default(uuid()) @map("variant_id")
    product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String         @map("product_id")
    size      Float
    color     String
    stock     Int            @default(0)
    price     Float // add this now i run this => npx prisma migrate dev --name add_price_to_variant =>before that npx prisma format
    sku       String         @unique
    createdAt DateTime       @default(now()) @map("created_at")
    images    VariantImage[]
    cart      Cart[]

    @@index([sku]) // Critical for inventory lookups
    @@index([productId]) // For fetching all variants of a product
    @@index([size, color]) // For size/color filters
    @@map("product_variants")
}

model VariantImage {
    id        String         @id @default(uuid())
    url       String
    variantId String
    variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

model Rating {
    id        String   @id @default(uuid()) @map("rating_id")
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String   @map("product_id")
    user      User     @relation(fields: [userId], references: [id])
    userId    Int      @map("user_id")
    value     Int
    // if (value < 1 || value > 5) throw new Error("Rating must be 1-5") add this 
    review    String?
    createdAt DateTime @default(now()) @map("created_at")

    @@index([userId]) // For user-specific rating queries
    @@index([productId]) // For product-specific rating queries
    @@map("ratings")
}

model Order {
    id     String @id @default(uuid()) @map("order_id")
    user   User   @relation(fields: [userId], references: [id])
    userId Int    @map("user_id")

    items             OrderItem[]
    totalAmount       Float       @map("total_amount")
    status            OrderStatus @default(PENDING)
    // paymentMethod     PaymentMethod // may be i dont need here 
    shippingAddressId String      @map("shiping_address_id")
    shippingAddress   Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
    payment           Payment

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@index([userId]) //users orders history
    @@index([status]) // For order status filtering or for admin order management
    @@index([createdAt]) // For sorting orders by date for time base report
    @@map("orders")
}

model OrderItem {
    id        String         @id @default(uuid()) @map("order_item_id")
    order     Order          @relation(fields: [orderId], references: [id])
    orderId   String         @map("order_id")
    variant   ProductVariant @relation(fields: [variantId], references: [id])
    variantId String         @map("variant_id")
    quantity  Int
    price     Float
    createdAt DateTime       @default(now()) @map("created_at")
    updatedAt DateTime       @updatedAt @map("updated_at")

    @@index([orderId])
    @@index([variantId])
    @@map("order_items")
}

model Payment {
    id      String @id @default(uuid()) @map("payment_id")
    orderId String @unique @map("order_id")
    order   Order  @relation(fields: [orderId], references: [id])

    paymentMethod PaymentMethod @map("payment_method")
    transactionId String        @unique @map("transaction_id")
    amount        Float         @map("amount")
    status        paymentStatus @map("status")

    gatewayResponse Json?    @map("gateway_response") //For stroing raw response from payment gateway
    createdAt       DateTime @default(now()) @map("created_at")
    updatedAt       DateTime @updatedAt @map("updated_at")

    @@index([orderId])
    @@index([transactionId])
    @@map("payments")
}

model Address {
    id     String @id @default(uuid()) @map("address_id")
    userId Int    @map("user_id")
    user   User   @relation(fields: [userId], references: [id])

    fullName       String   @map("full_name")
    addresLine1    String   @map("address_line_1")
    addresLine2    String?  @map("address_line_2") //optional
    city           String
    state          String
    postalCode     String   @map("postal_code")
    phoneNumber    String   @map("phone_number")
    shippingOrders Order[]  @relation("ShippingAddress")
    createdAt      DateTime @default(now()) @map("created_at")
    updatedAt      DateTime @updatedAt @map("updated_at")

    @@index([userId])
    @@map("addresses")
}

enum paymentStatus {
    SUCCESS
    FAILED
    PENDING
}

enum Gender {
    MEN
    WOMEN
    UNISEX
}

enum OrderStatus {
    PENDING
    PAID
    PACKED
    SHIPPED
    DELIVERED
    CANCELLED
}

enum PaymentMethod {
    CREDIT_CARD
    DEBIT_CARD
    COD
    UPI
    PAYPAL
    STRIPE
}
